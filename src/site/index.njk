---
title: Barrrgh!
---

{% extends "layouts/_base.njk" %}
<!-- prettier-ignore -->
{% block styles %}
{{ super() }}
<link href="/css/tom-select.css" rel="stylesheet" />
{% endblock %}
<!-- prettier-ignore -->
{% block body %}
<header class="flex items-center justify-center sm:mt-8">
  <h1 class="text-6xl">Barrrgh!</h1>
</header>
<main class="flex items-center justify-center">
  <div
    class="w-full sm:w-128 sm:flex-initial p-8 border-t border-b sm:border border-gray-300 sm:rounded bg-white space-y-4"
  >
    <form id="ingredients-form">
      <div class="flex justify-center mb-4">
        <label for="ingredients-select">What do you want in your drink?</label>
      </div>
      <div class="flex justify-center">
        <select
          id="ingredients-select"
          name="ingredients[]"
          autocomplete="off"
          multiple
          placeholder="Add ingredients ..."
          class="block w-full rounded-sm cursor-pointer focus:outline-none"
        >
          {% for ingredient in collections.ingredientsToDrinks | keys%}
          <option value="{{ ingredient }}">
            {{ ingredient | capitalize }}
          </option>
          {% endfor %}
        </select>
      </div>
    </form>
    <ul id="drinks-list" style="display: none"></ul>
    <h2 id="drinks-no-match" class="text-center" style="display: none">
      No drinks with all these ingredients ☠️
    </h2>
  </div>
</main>
<template id="drink-li-template">
  <li>
    <a href="#" class="block border-b p-4 hover:bg-gray-100">
      <h2 data-drink-li-prop="drinkTitle"></h2>
      <div class="text-xs text-gray-700">
        <span data-drink-li-prop="ingredients"></span>
      </div>
    </a>
  </li>
</template>
<script id="ingredients-to-drinks-data" type="application/json">
  {{ collections.ingredientsToDrinks | dump | safe }}
</script>
<script id="drink-slugs-to-drinks-data" type="application/json">
  {{ collections.drinkSlugsToDrinks | dump | safe }}
</script>
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/js/tom-select.complete.min.js"></script>
<script>
  // Manage traversing drinks data
  const DrinksData = function () {
    this.ingredientsToDrinks = JSON.parse(
      document.getElementById("ingredients-to-drinks-data").textContent
    );
    this.drinkSlugsToDrinks = JSON.parse(
      document.getElementById("drink-slugs-to-drinks-data").textContent
    );
  };

  DrinksData._intersection = function (setA, setB) {
    const _intersection = new Set();
    for (const elem of setB) {
      if (setA.has(elem)) {
        _intersection.add(elem);
      }
    }
    return _intersection;
  };

  DrinksData.prototype.searchDrinks = function (ingredients) {
    if (ingredients.length === 0) {
      return [];
    }

    let matchingSlugs = new Set(this.ingredientsToDrinks[ingredients[0]]);
    for (let i = 1; i < ingredients.length; i++) {
      matchingSlugs = DrinksData._intersection(
        matchingSlugs,
        new Set(this.ingredientsToDrinks[ingredients[i]])
      );
    }

    return Array.from(matchingSlugs);
  };

  DrinksData.prototype.getDrinkBySlug = function (drinkSlug) {
    return this.drinkSlugsToDrinks[drinkSlug];
  };

  // Manage drinks lists
  const DrinksList = function () {
    this.$drinksList = document.getElementById("drinks-list");
    this.$drinksNoMatch = document.getElementById("drinks-no-match");
    this.$itemTemplate = document.getElementById(
      "drink-li-template"
    ).content.firstElementChild;
  };

  DrinksList.prototype.createDrinkItemNode = function (drink) {
    const $item = this.$itemTemplate.cloneNode(true);
    const $anchor = $item.children[0];
    $anchor.href = drink.drinkUrl;
    $anchor.querySelector('[data-drink-li-prop="drinkTitle"').innerText =
      drink.drinkTitle;
    $anchor.querySelector(
      '[data-drink-li-prop="ingredients"'
    ).innerText = drink.ingredients.join(", ");
    return $item;
  };

  DrinksList.prototype.resetDrinksList = function () {
    this.$drinksNoMatch.style.display = "none";
    this.$drinksList.style.display = "none";
    this.$drinksList.replaceChildren();
  };

  DrinksList.prototype.renderDrinksList = function (drinks) {
    const newChildren = [];
    for (const drink of drinks) {
      newChildren.push(this.createDrinkItemNode(drink));
    }
    this.$drinksNoMatch.style.display = "none";
    this.$drinksList.style.display = null;
    this.$drinksList.replaceChildren(...newChildren);
  };

  DrinksList.prototype.renderNoMatch = function (drinkSlugs) {
    this.$drinksList.style.display = "none";
    this.$drinksList.replaceChildren();
    this.$drinksNoMatch.style.display = null;
  };

  const drinksData = new DrinksData();
  const drinksList = new DrinksList();

  const ingredientSelector = new TomSelect("#ingredients-select", {
    plugins: {
      remove_button: {
        title: "Remove this item",
      },
    },
    closeAfterSelect: true,
    // onChange: onIngredientsChange,
  });
  function onIngredientsChange(ingredients) {
    if (ingredients.length === 0) {
      drinksList.resetDrinksList();
      ingredientSelector.blur();
      return;
    }

    const drinkSlugs = drinksData.searchDrinks(ingredients);

    if (drinkSlugs.length === 0) {
      drinksList.renderNoMatch();
      ingredientSelector.blur();
      return;
    }

    drinksList.renderDrinksList(
      drinkSlugs.map((ds) => drinksData.getDrinkBySlug(ds))
    );
    ingredientSelector.blur();
  }
  ingredientSelector.on("change", onIngredientsChange);
</script>
{% endblock %}
